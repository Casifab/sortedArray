T getNodeValue(unsigned int arr_pos) const {
  return this->nd_array[arr_pos].value;
}

void setNodeValue(unsigned int arr_pos, T newValue) {
  this->nd_array[arr_pos].value= newValue;
}

unsigned int getNodePosition(unsigned int arr_pos) const {
  return this->nd_array[arr_pos].logic_pos;
}

void setNodePosition(unsigned int arr_pos, unsigned int new_pos) {
  this->nd_array[arr_pos].logic_pos= new_pos;
}

sa.setNodePosition(0,3);
sa.setNodePosition(1,1);
sa.setNodePosition(2,4);
sa.setNodePosition(3,0);
sa.setNodePosition(4,2);

void stampaNodi() {
  for(int i= 0; i < contents; i++) {
    std::cout << "[" << nd_array[i].value << ", " << nd_array[i].logic_pos << ", " << contents << ", " << size << "]" << '\n';
  }
}

nd_array[contents]= val;
int pos= 0;
bool notFound= true;
while (notFound) {
  pos= findLogicPos();
  if(val < nd_array[pos]) {
    pos_array[contents]= pos_array[pos];
  }
}
for(int i= 0; i < contents; i++) {
  if(pos_array[i] >= pos_array[contents])
    pos_array[i]+= 1;
}
contents++;
